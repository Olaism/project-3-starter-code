version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  ansible-playbook: orbss/ansible-playbook@0.0.5
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          command: |
            echo "Destroying environments: << parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
          when: on_fail

  revert-migration:
    description: Revert the last migration if successfully run in current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: /
            SUCCESS=$(curl --insecure  https://kvdb.io/XQpLhkvs27UXjFxtRmWA2r/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:3d:29:2d:0f:b9:54:46:c9:a0:20:59:b5:56:65:5b"]
      - attach_workspace:
          at: project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apt install tar gzip
            pip install ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/XQpLhkvs27UXjFxtRmWA2r/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migration:
                workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            sudo apt install nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
                    
  deploy_backend:
    docker:
      - image: ansible/ansible-playbook
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:3d:29:2d:0f:b9:54:46:c9:a0:20:59:b5:56:65:5b"]
      - attach_workspace:
          at: project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            sudo apt install nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -----"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke_test:
    docker:
      - image: alpine:3.15 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install curl
      - run:
          name: Get backend url
          command: |
            echo "${BACKEND_IP}"
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3000"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront_update:
    docker:
      - image: amazon:aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml /
            --stack-name InitialStackName \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: cicleci/node:18.3.0
    steps:
      - run:
          name: get old stack workflow id
          command: /
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: /
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - deploy_infrastructure
          # requires: [test_frontend, test_backend, scan_frontend, scan_backend]
          # filters:
          #   branches:
          #     only: [test_feature_branch]
      - configure_infrastructure:
          requires: [deploy_infrastructure]
      - run_migrations:
          requires: [configure_infrastructure]
      - deploy_frontend:
          requires: [run_migrations]
      - deploy_backend:
          requires: [run_migrations]
      - smoke_test:
          requires: [deploy_backend, deploy_frontend]
      - cloudfront_update:
          requires: [smoke_test]
      - cleanup:
          requires: [cloudfront_update]